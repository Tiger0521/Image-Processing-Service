 **阶段一：用户系统 + JWT 身份验证 + 数据库模型搭建**。

我将以 **Python + FastAPI + SQLAlchemy + SQLite（开发期）** 为例进行示范，你可以稍后替换为 PostgreSQL 或其他数据库。

---

## ✅ 阶段一目标：

* 初始化 FastAPI 项目
* 搭建 SQLite 数据库
* 实现注册 `/register` 和登录 `/login` 接口
* 实现 JWT 生成与验证机制
* 用户数据安全存储（密码哈希）

---

## 📁 目录结构

```
project/
├── app/
│   ├── main.py               # FastAPI 启动入口
│   ├── models.py             # 数据模型
│   ├── auth.py               # JWT & 密码处理
│   ├── database.py           # 数据库连接管理
│   ├── schemas.py            # 请求和响应的数据结构
│   ├── routes/
│   │   └── user_routes.py    # 注册/登录路由
├── requirements.txt
```

---

## 1️⃣ 初始化项目与依赖

```bash
mkdir image-service && cd image-service
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate
pip install fastapi uvicorn[standard] sqlalchemy passlib[bcrypt] python-jose
```

### `requirements.txt`

```
fastapi
uvicorn[standard]
sqlalchemy
passlib[bcrypt]
python-jose
```

---

## 2️⃣ 数据库连接与模型

### `app/database.py`

```python
from sqlalchemy import create_engine  # 创建数据库引擎（负责连接数据库）
from sqlalchemy.ext.declarative import declarative_base  # 创建模型基类
from sqlalchemy.orm import sessionmaker  # 创建数据库会话（用于执行 CRUD 操作）

# 使用 SQLite 数据库（本地开发期使用文件数据库，适合快速调试）
# 若使用 PostgreSQL，请改为：postgresql://user:password@localhost/dbname
SQLALCHEMY_DATABASE_URL = "sqlite:///./images.db"

# 创建数据库引擎
# connect_args={"check_same_thread": False} 是 SQLite 特有的设置
engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)

# 创建数据库会话工厂
# 每次请求数据库时可以调用 SessionLocal() 创建会话对象
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# 创建所有模型类的基类，其他模型都要继承它
# Base.metadata.create_all(engine) 可用来自动生成表
Base = declarative_base()
```

### `app/models.py`

```python
from sqlalchemy import Column, Integer, String, DateTime  # 定义字段类型
from datetime import datetime
from .database import Base  # 从 database.py 引入 Base 类

# 创建一个 User 模型类，对应数据库中的 users 表
class User(Base):
    __tablename__ = "users"  # 数据库中的表名是 users

    # 主键字段，自动递增
    id = Column(Integer, primary_key=True, index=True)

    # 用户名字段，唯一约束 + 索引
    username = Column(String, unique=True, index=True)

    # 存储加密后的密码（bcrypt 加密）
    hashed_password = Column(String)

    # 用户注册时间，默认使用当前 UTC 时间
    created_at = Column(DateTime, default=datetime.utcnow)
```

---

## 3️⃣ JWT 与密码工具

### `app/auth.py`

```python
# 密码加密与 JWT 工具模块

from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta

# 创建密码上下文对象，用于对密码进行哈希与验证
# bcrypt 是一种常用的安全哈希算法
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# JWT 配置项
# 用于加密签名的密钥（应保密，建议通过环境变量或配置文件读取）
SECRET_KEY = "your_secret_key_here"  # ⚠️ 生产环境务必更换
# 加密算法，这里使用 HMAC-SHA256
ALGORITHM = "HS256"
# Token 有效期（单位：分钟）
ACCESS_TOKEN_EXPIRE_MINUTES = 30


# ✅ 验证明文密码是否和加密后的一致（用于登录）
def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)


# ✅ 对用户的明文密码进行哈希加密（用于注册时存入数据库）
def hash_password(password: str) -> str:
    return pwd_context.hash(password)


# ✅ 创建访问令牌（JWT）
# 参数 data 是 payload，例如 {"sub": username}
# 参数 expires_delta 是有效期时间（可选）
def create_access_token(data: dict, expires_delta: timedelta = None) -> str:
    # 创建副本以防修改原始数据
    to_encode = data.copy()
    # 计算过期时间，默认为当前时间 + ACCESS_TOKEN_EXPIRE_MINUTES
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    # 在 payload 中添加 exp 字段（JWT 标准字段）
    to_encode.update({"exp": expire})
    # 使用密钥和算法编码为 JWT 字符串
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


# ✅ 解码 JWT，并验证其有效性
# 返回解码后的 payload（如 {"sub": "user1", "exp": ...}）
def decode_access_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except JWTError:
        # 如果 token 无效、过期或伪造，会抛出异常
        raise ValueError("Token is invalid or expired")
```

---

## 4️⃣ Pydantic 模型

### `app/schemas.py`

```python
from pydantic import BaseModel

class UserCreate(BaseModel):
    username: str
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str
```

---

## 5️⃣ 用户注册 & 登录接口

### `app/routes/user_routes.py`

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from .. import models, schemas, auth, database

# 创建一个路由器对象，用于挂载到主应用上
router = APIRouter()

# 定义一个依赖函数，用于获取数据库 session
def get_db():
    db = database.SessionLocal()
    try:
        yield db  # 返回 db 给请求使用
    finally:
        db.close()  # 请求结束后关闭数据库连接


@router.post("/register", response_model=schemas.Token)
def register(user: schemas.UserCreate, db: Session = Depends(get_db)):
    """
    用户注册接口：
    1. 检查用户名是否已存在
    2. 加密密码并保存到数据库
    3. 返回 JWT Token
    """
    # 检查数据库中是否已有该用户名
    existing = db.query(models.User).filter_by(username=user.username).first()
    if existing:
        raise HTTPException(status_code=400, detail="Username already exists")

    # 对密码进行哈希加密
    hashed = auth.hash_password(user.password)

    # 创建一个新的用户对象并添加到数据库
    new_user = models.User(username=user.username, hashed_password=hashed)
    db.add(new_user)
    db.commit()          # 提交事务
    db.refresh(new_user) # 刷新对象以获取其 ID 等信息

    # 创建 JWT Token，payload 中包含用户标识 "sub"
    token = auth.create_access_token(data={"sub": new_user.username})

    # 返回 token 给客户端
    return {"access_token": token, "token_type": "bearer"}

@router.post("/login", response_model=schemas.Token)
def login(user: schemas.UserCreate, db: Session = Depends(get_db)):
    """
    用户登录接口：
    1. 查找用户是否存在
    2. 校验密码是否正确
    3. 返回 JWT Token
    """
    # 根据用户名查找数据库中的用户记录
    db_user = db.query(models.User).filter_by(username=user.username).first()

    # 用户不存在或密码错误
    if not db_user or not auth.verify_password(user.password, db_user.hashed_password):
        raise HTTPException(status_code=401, detail="Invalid credentials")

    # 登录成功，生成 JWT Token
    token = auth.create_access_token(data={"sub": db_user.username})

    # 返回 token 给客户端
    return {"access_token": token, "token_type": "bearer"}

```

---

## 6️⃣ 主程序入口

### `app/main.py`

```python
from fastapi import FastAPI
from .database import Base, engine
from .routes import user_routes

Base.metadata.create_all(bind=engine)

app = FastAPI()

app.include_router(user_routes.router)
```

---

## 🚀 启动服务

```bash
uvicorn app.main:app --reload
```

访问：
进入http://127.0.0.1:8000/docs
* `POST /register`
* `POST /login`
点击 Try it out 按钮
填写请求体数据
```
{
  "username": "user1",
  "password": "password123"
}
```


你就完成了基础的用户系统和 JWT 鉴权。


